from build_dataloader import BuildDataloader
from train import trainModel
from utils.utils import setup_seed
import torch
import numpy as np
import random
import os

def SetSeed():
    # 设置随机种子
    setup_seed(42)
    torch_state_seed_value = torch.initial_seed()
    print("Torch Random Seed:", torch_state_seed_value)

    rng_state = np.random.get_state()
    rng_state_seed_value = rng_state[1][0]
    print("NumPy Random Seed:", rng_state_seed_value)

    random_state = random.getstate()
    random_state_seed_value = random_state[1][0]
    print("Python Random Seed:", random_state_seed_value)

if __name__ == "__main__":

    const_data_path = {
        "ali_data":os.path.join("ali-data", "data_cla.csv"),
        "MalbehavD_data":os.path.join("MalbehavD-V1", "MalBehavD-V1-dataset.csv"),
        "Mal_API_Seq_data":os.path.join("Malware-Detection-API-Sequence-Intrinsic-Features", "data.csv"),
    }

    SetSeed()
    hyperparameters = {
        "num_epochs": 136,
        "learning_rate": 0.001,
        "n_class":2,
        "sequence_max_len":3500,
        "start_kernel_size":1,
        "Max_kernel_size":89,
        "paramenter_number_of_layer_list":[8*128, 5*128*256 + 2*256*128],
        "embedding_dim":50,
        "lstm_output_dim":20,

        "linear": 32,
        "dropout": 0.6,

        "batch_size": 256,
        "data_path":const_data_path["ali_data"],
    }

    TrainDataLoader, TestDataLoader = BuildDataloader(
    batch_size=hyperparameters['batch_size'], 
    sequence_max_len=hyperparameters['sequence_max_len'],
    data_path=hyperparameters["data_path"])

    print(hyperparameters)
    trainModel(TrainDataLoader,TestDataLoader,hyperparameters)