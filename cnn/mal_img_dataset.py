import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from PIL import Image
import os

class MalimgDataset(Dataset):
    def __init__(self, root_dir, transform=None, train=True):
        self.root_dir = root_dir
        self.transform = transform
        self.train = train
        self.classes = sorted(os.listdir(root_dir))
        self.class_to_idx = {cls_name: i for i, cls_name in enumerate(self.classes)}
        self.img_paths = self._get_img_paths()

    def _get_img_paths(self):
        img_paths = []
        for cls in self.classes:
            cls_dir = os.path.join(self.root_dir, cls)
            img_names = os.listdir(cls_dir)
            if self.train:
                img_names = img_names[:int(0.8 * len(img_names))]  # 取80%作为训练集
            else:
                img_names = img_names[int(0.8 * len(img_names)):]  # 剩下的作为测试集
            for img_name in img_names:
                img_path = os.path.join(cls_dir, img_name)
                img_paths.append((img_path, self.class_to_idx[cls]))
        return img_paths

    def __len__(self):
        return len(self.img_paths)

    def __getitem__(self, idx):
        img_path, label = self.img_paths[idx]
        image = Image.open(img_path).convert('L')

        # Resize and CenterCrop transformation
        resize_crop = transforms.Compose([
            transforms.Resize(512),
            transforms.CenterCrop(512),
        ])
        image = resize_crop(image)

        # Padding if necessary
        pad = transforms.Compose([
            transforms.Pad((0, 0, 512 - image.size[0], 512 - image.size[1]), fill=0),
        ])
        image = pad(image)

        if self.transform:
            image = self.transform(image)
        return image, label

transform = transforms.Compose([
    transforms.ToTensor(),
])

def ImgData(batch_size, train):
    malimg_data = MalimgDataset(root_dir=os.path.join("data", "malimg_dataset"), transform=transform, train=train)
    malimg_dataloader = DataLoader(malimg_data, batch_size=batch_size, shuffle=True)
    return malimg_dataloader

# # 创建数据集
# malimg_data = MalimgDataset(root_dir=os.path.join("data", "malimg_dataset"), transform=transform)

# # 创建数据加载器
# batch_size = 32
# malimg_dataloader = DataLoader(malimg_data, batch_size=batch_size, shuffle=True)

# # 使用示例
# for images, labels in malimg_dataloader:
#     # 这里的 images 是一个形状为 (batch_size, channels, height, width) 的张量
#     # labels 是一个形状为 (batch_size,) 的张量，包含了每个图像的类别标签
#     print(images.shape, labels.shape)
